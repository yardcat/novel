rule "relic_test"
begin
if actor.Life > actor.Life /2 {
    actor.Strength = 0
}
end

rule "potion_test"
begin
actor.Strength += 2
end

rule "attack"
begin
combat.Attack(card, target)
end

rule "body_slam_attack"
begin
card.Values["attack"] = actor.GetArmor()
combat.Attack(card, target)
end

rule "defense"
begin
combat.AddArmor(card)
end

rule "cast_vulnerable"
begin
combat.AddVulnerable(card, target)
end

rule "cast_weak"
begin
combat.AddWeak(card, target)
end

rule "anger"
begin
copy=t.GetCard(card.Id)
combat.PutCardDiscard(copy)
end

rule "clash_can_use"
begin
cards := combat.GetHandCards()
forRange i := cards {
    c := cards[i]
    if !c.IsAttack() {
        return false
    }
}
return true
end

rule "add_strength_buff"
begin
value := card.GetValue("strength")
combat.AddBuff(actor, "strength", 1, value, 1)
end

rule "upgrade"
begin
combat.UpgradeCards(choosen_cards)
end

rule "head_butt"
begin
cards := combat.DrawFromDiscard(choosen_cards)
combat.PutOnDeck(cards)
end

rule "heavy_attack"
begin
card.Values["attack"] += actor.Strength * card.GetValue("factor")
combat.Attack(card, target)
end

rule "draw_card"
begin
count := card.Values["draw_count"]
combat.DrawCards(count)
end
